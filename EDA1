{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOrKXtUuQeBDsA4jPLA0zL0",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ebro033/dz/blob/main/EDA1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "ВТОРОЕ ЗАДАНИЕ"
      ],
      "metadata": {
        "id": "4ZE1CLm3WdIt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#создаем словарь с данными\n",
        "intervals = {\n",
        "    \"5-10\": 2,\n",
        "    \"10-14\": 4,\n",
        "    \"14-18\": 6,\n",
        "    \"18-25\": 5,\n",
        "    \"25-40\": 1\n",
        "}\n",
        "\n",
        "#разбиваем интервалы и вычисляем количество пловцов в каждом\n",
        "total_swimmers_in_intervals = {}\n",
        "for interval, density in intervals.items():\n",
        "    start, end = map(int, interval.split('-'))\n",
        "    total_swimmers = density * (end - start)\n",
        "    total_swimmers_in_intervals[interval] = total_swimmers\n",
        "\n",
        "#количество пловцов, у которых время превышает 20 минут\n",
        "swimmers_above_20 = total_swimmers_in_intervals[\"18-25\"] * 5/7 + total_swimmers_in_intervals[\"25-40\"]\n",
        "\n",
        "print(f\"Количество пловцов, время которых превышает 20 минут: {swimmers_above_20}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hQvTtydZWc_3",
        "outputId": "1e3fa860-4f8d-4986-e5c4-eb4332ae1941"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Количество пловцов, время которых превышает 20 минут: 40.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "JzcilThsWc9U"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "1D1H0a5PWc54"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "b8W1VWF5Wc2F"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "tTs30MbPWcz7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "PrW4Byt5Wcxb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "rX-rkzHUWcuU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "wtnRPBZrWcrq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "VyN7oV61Wcm-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "0t3ZNGJHWckY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "t3GFOelrWch3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "_tn-ldjOWcfA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "MksZPdCyWcbx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "ПЕРВОЕ ЗАДАНИЕ"
      ],
      "metadata": {
        "id": "LsTpHc0hWNDO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "5PVvlHMrGXc2",
        "outputId": "aa1942bb-7b6e-4365-87ac-602bed1c98b1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-353a7439-ab51-4ede-b765-64bd021d3860\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-353a7439-ab51-4ede-b765-64bd021d3860\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving flats_moscow.csv to flats_moscow (1).csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Загружаем данные из CSV файла\n",
        "df = pd.read_csv(\"flats_moscow.csv\")\n"
      ],
      "metadata": {
        "id": "6I_479sGGXa_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#разбиваем переменную 'price' на 10 равных интервалов\n",
        "df['price_bin'] = pd.cut(df['price'], bins=10)\n",
        "\n",
        "#создаем таблицу частот для разбитой переменной 'price'\n",
        "frequency_table_price = df['price_bin'].value_counts().sort_index()\n",
        "\n",
        "#разбиваем переменную 'totsp' на 10 равных интервалов\n",
        "df['totsp_bin'] = pd.cut(df['totsp'], bins=10)\n",
        "\n",
        "#Создаем таблицу частот для переменной 'totsp'\n",
        "frequency_table_totsp = df['totsp_bin'].value_counts().sort_index()\n",
        "\n",
        "print(\"Таблица частот для 'price':\")\n",
        "print(frequency_table_price)\n",
        "print(\"\\nТаблица частот для 'totsp':\")\n",
        "print(frequency_table_totsp)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DS0jroN-GXZL",
        "outputId": "9d9096db-fec4-41d2-eb92-1146d655f217"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Таблица частот для 'price':\n",
            "(49.32, 118.0]    1098\n",
            "(118.0, 186.0]     779\n",
            "(186.0, 254.0]     110\n",
            "(254.0, 322.0]      25\n",
            "(322.0, 390.0]      15\n",
            "(390.0, 458.0]       7\n",
            "(458.0, 526.0]       4\n",
            "(526.0, 594.0]       1\n",
            "(594.0, 662.0]       0\n",
            "(662.0, 730.0]       1\n",
            "Name: price_bin, dtype: int64\n",
            "\n",
            "Таблица частот для 'totsp':\n",
            "(43.852, 58.8]    291\n",
            "(58.8, 73.6]      729\n",
            "(73.6, 88.4]      817\n",
            "(88.4, 103.2]     112\n",
            "(103.2, 118.0]     52\n",
            "(118.0, 132.8]     22\n",
            "(132.8, 147.6]     10\n",
            "(147.6, 162.4]      6\n",
            "(162.4, 177.2]      0\n",
            "(177.2, 192.0]      1\n",
            "Name: totsp_bin, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Рссчеат оцененного среднего для  price\n",
        "mid_points_price = [(interval.left + interval.right) / 2 for interval in frequency_table_price.index]\n",
        "estimated_mean_price = sum(mid_points_price * frequency_table_price) / df['price'].count()\n",
        "\n",
        "#Рассчет оцененного среднего для  totsp\n",
        "mid_points_totsp = [(interval.left + interval.right) / 2 for interval in frequency_table_totsp.index]\n",
        "estimated_mean_totsp = sum(mid_points_totsp * frequency_table_totsp) / df['totsp'].count()\n",
        "\n",
        "print(f\"Оцененное среднее для 'price': {estimated_mean_price:.2f}\")\n",
        "print(f\"Оцененное среднее для 'totsp': {estimated_mean_totsp:.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7E0K2EcVGXXA",
        "outputId": "841dd1e5-a475-4a8b-9e9e-339c23c70ee6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Оцененное среднее для 'price': 124.12\n",
            "Оцененное среднее для 'totsp': 74.08\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def find_median(freq_table):\n",
        "    cum_freq = freq_table.cumsum()\n",
        "    total_records = cum_freq.iloc[-1]\n",
        "\n",
        "    #Определяем интервал, в котором находится медиана\n",
        "    median_bin = cum_freq[cum_freq >= total_records/2].index[0]\n",
        "\n",
        "    # значение медианы внутри этого интервала\n",
        "    return (median_bin.left + median_bin.right) / 2\n",
        "\n",
        "median_price = find_median(price_freq)\n",
        "\n",
        "print(f\"Медиана цены: {median_price}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oPhpF6aPGXVH",
        "outputId": "0ae28d28-de6a-47de-edda-86d92b1840d9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Медиана цены: 83.66\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def find_median(freq_table):\n",
        "    cum_freq = freq_table.cumsum()\n",
        "    total_records = cum_freq.iloc[-1]\n",
        "\n",
        "    # Определяем интервал, в котором находится медиана\n",
        "    median_bin = cum_freq[cum_freq >= total_records/2].index[0]\n",
        "\n",
        "    return (median_bin.left + median_bin.right) / 2\n",
        "\n",
        "median_totsp = find_median(totsp_freq)\n",
        "\n",
        "print(f\"Медиана общей площади: {median_totsp}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uM3A6RB1GXSR",
        "outputId": "81952ca6-bf96-48d4-c6cb-fd0efe6e7ddf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Медиана общей площади: 66.19999999999999\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "n_kcwfN-GXPZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4dGVPCRvFu8V",
        "outputId": "c6dff905-8ab3-423a-c3fb-4fead1932346"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ошибка оценки средней цены: -2.65%\n",
            "Ошибка оценки медианы цены: -27.25%\n",
            "Ошибка оценки средней общей площади: 1.36%\n",
            "Ошибка оценки медианы общей площади: -9.93%\n"
          ]
        }
      ],
      "source": [
        "def calculate_errors(df, column, estimated_mean, estimated_median):\n",
        "    true_mean = df[column].mean()\n",
        "    true_median = df[column].median()\n",
        "\n",
        "    error_mean = 100 * (estimated_mean - true_mean) / true_mean\n",
        "    error_median = 100 * (estimated_median - true_median) / true_median\n",
        "\n",
        "    return error_mean, error_median\n",
        "\n",
        "# Оценки\n",
        "estimated_mean_price = float(\"124.12\") #реобразование к float\n",
        "estimated_median_price = float(\"83.66\")\n",
        "estimated_mean_totsp = float(\"74.08\")\n",
        "estimated_median_totsp = float(\"66.19999999999999\")\n",
        "\n",
        "error_mean_price, error_median_price = calculate_errors(df, 'price', estimated_mean_price, estimated_median_price)\n",
        "error_mean_totsp, error_median_totsp = calculate_errors(df, 'totsp', estimated_mean_totsp, estimated_median_totsp)\n",
        "\n",
        "print(f\"Ошибка оценки средней цены: {error_mean_price:.2f}%\")\n",
        "print(f\"Ошибка оценки медианы цены: {error_median_price:.2f}%\")\n",
        "print(f\"Ошибка оценки средней общей площади: {error_mean_totsp:.2f}%\")\n",
        "print(f\"Ошибка оценки медианы общей площади: {error_median_totsp:.2f}%\")"
      ]
    }
  ]
}